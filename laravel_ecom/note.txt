php artisan make:controller Backend/CategoryController -r

Route::resource('category',CategoryController::class);
php artisan make:model

seed,factory,requests,migration


**********category table************

  Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('slug');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            $table->softDeletes();
        });

********************category model***************

        class Category extends Model
{
    use HasFactory, SoftDeletes;
    protected $guarded = ['id'];
}


***********************category factory**************************
        $title = $this->faker->title;
        $slug = Str::slug($title);
        return [
            'title'=>$title,
            'slug'=>$slug
        ];

************************category seeder**************************

    public function run(): void
    {
        $demoz_category = [
            'Honey',
            'Natural oil',
            'Nuts',
            'Coconut',
            'Butter',
        ];

        foreach ($demoz_category as $value){
            Category::create([
                'title'=>$value,
                'slug'=>Str::slug($value)
            ]);
        }
    }

    *********************datebase seeder*******************
       $this->call([
            UserSeeder::class,
            CategorySeeder::class
        ]);


php artisan migrate:fresh --seed


*********************add toastr******************

google->toastr laravel ( brian2694/laravel-toastr)
composer require brian2694/laravel-toastr
php artisan vendor:publish




***********************sweet alert*************************

google->sweetalert2   (github)
<script src="{{ asset('https://cdn.jsdelivr.net/npm/sweetalert2@11') }}"></script>


<script>
    $(document).ready(function(){


     $('.show_confirm').click(function(event){   //this line
        let form = $(this).closest('form');  //this line
        event.preventDefault();  //this line


                Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                if (result.isConfirmed) {
                    form.submit(); //this line
                    Swal.fire(
                    'Deleted!',
                    'Your file has been deleted.',
                    'success'
                    )
                }
                })
     });
 });


</script>

******************testimonial*********************
php artisan make:model
testimonial
1

**********testimonial Model********

class Testimonial extends Model
{
    use HasFactory,SoftDeletes;
    protected $guarded = ['id'];
}


**********testimonial table********
    Schema::create('testimonials', function (Blueprint $table) {
            $table->id();
            $table->string('client_name');
            $table->string('client_name_slug');
            $table->string('client_designation');
            $table->longText('client_message');
            $table->string('client_image')->nullable()->default('default-client.jpg');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            $table->softDeletes();
        });



**********testimonial factory********

   public function definition(): array
    {
        $name = $this->faker->name;
        return [
            'client_name'=>$name,
            'client_name_slug'=>Str::slug($name),
            'client_designation'=>$this->faker->jobTitle.','.' '.$this->faker->company,
            'client_message'=>$this->faker->paragraph(),
        ];
    }
**********testimonial seeder********

  public function run(): void
    {
        Testimonial::factory()->count(10)->create();
    }


**********datebase seeder********
        $this->call([
            UserSeeder::class,
            CategorySeeder::class,
            TestimonialSeeder::class
        ]);


php artisan migrate:fresh --seed
or-------------
php artisan db:seed --class="TestimonialSeeder"



****************testimonial crud*********************
php artisan make:controller Backend/TestimonialController -r

   public function index()
    {
        $testimonials = Testimonial::latest('id')->select(['id','client_name','client_name_slug','client_designation','client_message','client_image','updated_at'])->paginate(5);
        // return $testimonial;
        return view('backend.pages.testimonial.index',compact('testimonials'));
    }



********testimonial index*************
@extends('backend.layouts.master')

@section('title') Testimonial index @endsection
 @push('admin_style')
<link rel="stylesheet" href="{{ asset('https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css') }}">
<style>
    .dataTables_length {
        padding: 20px 0;
    }
</style>

@endpush
@section('admin_content')
 <div class="row">
    <h1>Testimonial List Table</h1>
    <div class="col-12">
        <div class="d-flex justify-content-end">
            <a href="{{ route('testimonial.index') }}" class="btn btn-primary">
                <i class="fas fa-plus-circle"></i>
                Add New Testimonial
            </a>
        </div>
    </div>
    <div class="col-12">
        <div class="table-responsive my-2">
            <table class="table table-bordered table-striped dataTables_length" id="dataTable">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Last Modified</th>
                        <th scope="col">Client Image</th>
                        <th scope="col">Client Name</th>
                        <th scope="col">Client Designation</th>
                        <th scope="col">Options</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ($testimonials as $testimonial)
                        <tr>
                            <th scope="row">{{ $testimonials->firstItem()+$loop->index }}</th>
                            <td>{{ $testimonial->updated_at->format('d M Y') }}</td>
                            <td>{{ $testimonial->client_image }}</td>
                            <td>{{ $testimonial->client_name }}</td>
                            <td>{{ $testimonial->client_designation }}</td>

                            <td>





                                <div class="dropdown">
                                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                        Setting
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                        <li><a href="{{ route('testimonial.edit',$testimonial->client_name_slug) }}" class="dropdown-item">
                                            <i class="fas fa-edit"></i>Edit
                                        </a></li>
                                        <li>
                                            <form action="{{ route('testimonial.destroy',$testimonial->client_name_slug) }}" method="POST">
                                                @csrf
                                                @method('DELETE')
                                                <button class="dropdown-item show_confirm" type="submit"> <i class="fas fa-trash"></i>Delete</button>
                                            </form>

                                            {{-- <a href="{{ route('category.destroy',$category->slug) }}" class="dropdown-item">
                                            <i class="fas fa-trash"></i>Delete
                                             </a> --}}
                                    </li>
                                    </ul>
                                  </div>
                            </td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
        </div>

    </div>
 </div>
@endsection


 @push('admin_script')
 <script src="{{ asset('https://code.jquery.com/jquery-3.7.0.js') }}"></script>
<script src="{{ asset('https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js') }}"></script>
<script src="{{ asset('https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js') }}"></script>
<script src="{{ asset('https://cdn.jsdelivr.net/npm/sweetalert2@11') }}"></script>
<script>
    $(document).ready(function(){
        $('#dataTable').DataTable({
            pagingType:'first_last_numbers',
        });

     $('.show_confirm').click(function(event){   //this line
        let form = $(this).closest('form');  //this line
        event.preventDefault();  //this line


                Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                if (result.isConfirmed) {
                    form.submit(); //this line
                    Swal.fire(
                    'Deleted!',
                    'Your file has been deleted.',
                    'success'
                    )
                }
                })
     });
 });


</script>
@endpush

*
*****************************testimonial create****************************************

google->image intervanion








*******************************StoreTestimonialRequest**************************
   public function rules(): array
    {
        return [
            'client_name'=>'required|string|max:255',
            'client_designation'=>'required|string|max:255',
            'client_message'=>'required|string',
            'client_image'=>'nullable|image',
        ];
    }

*******************************testimonial controller**************************
<?php

namespace App\Http\Controllers\Backend;

use App\Models\Testimonial;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Brian2694\Toastr\Facades\Toastr;
use Intervention\Image\Facades\Image;
use App\Http\Requests\StoreTestimonialRequest;

class TestimonialController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $testimonials = Testimonial::latest('id')->select(['id','client_name','client_name_slug','client_designation','client_message','client_image','updated_at'])->paginate(5);
        // return $testimonial;
        return view('backend.pages.testimonial.index',compact('testimonials'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('backend.pages.testimonial.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreTestimonialRequest $request)
    {

        $testimonial = Testimonial::create([
            'client_name'=>$request->client_name,
            'client_name_slug'=>Str::slug($request->client_name),
            'client_designation'=>$request->client_designation,
            'client_message'=>$request->client_message,
        ]);
        $this->image_upload($request, $testimonial->id);
        Toastr::success('Testimonial created successfully');
        return redirect()->route('testimonial.index');
    }

    function image_upload($request, $item_id){
        $testimonial = Testimonial::findorFail($item_id);

        if($request->hasFile('client_image')){
            if($testimonial->client_image !='default-client.jpg'){
                $photo_location = 'public/uploads/testimonials/';
                $old_photo_location = $photo_location.$testimonial->client_image;
                unlink(base_path($old_photo_location));

            }
            $photo_location = 'public/uploads/testimonials/';
            $uploaded_photo = $request->file('client_image');
            $new_photo_name = $testimonial->id.'.'.$uploaded_photo->getClientOriginalExtension();
            $new_photo_location = $photo_location.$new_photo_name;
            Image::make($uploaded_photo)->resize(105,105)->save(base_path($new_photo_location),40);
            $check = $testimonial->update([
                'client_image' => $new_photo_name,
            ]);
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
}




***************************************************
php artisan make:controller Frontend/HomeController
